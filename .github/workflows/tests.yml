name: Run tests

on: [push]

jobs:
    test-node:
        name: Test on node ${{ matrix.node_version }}
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: testbench
                ports:
                    - "3308:3306"
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            matrix:
                node_version: ["10", "12"]

        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js ${{ matrix.node_version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node_version }}
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: yarn cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install modules
              run: yarn install
            - name: Run node tests
              env:
                  DB_TEST_HOST: "127.0.0.1"
                  DB_TEST_USER: root
                  DB_TEST_PASS: testbench
                  DB_TEST_PORT: ${{ job.services.mysql.ports['3306'] }}
                  DB_TEST_DB: deployer__tests
              run: |
                  mysql --host ${DB_TEST_HOST} -u${DB_TEST_USER} -p${DB_TEST_PASS} --port ${DB_TEST_PORT} -e "CREATE DATABASE IF NOT EXISTS ${DB_TEST_DB};"
                  yarn run migrate:test
                  yarn run test
                  yarn run report-coverage
            - name: Send coverage
              uses: codecov/codecov-action@v1
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}

    test-migrate:
        name: Test migrations on node ${{ matrix.node_version }}
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ROOT_PASSWORD: testbench
                ports:
                    - "3308:3306"
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            matrix:
                node_version: ["10", "12"]

        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js ${{ matrix.node_version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node_version }}
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: yarn cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install modules
              run: yarn install
            - name: Run node tests
              env:
                  DB_TEST_HOST: "127.0.0.1"
                  DB_TEST_USER: root
                  DB_TEST_PASS: testbench
                  DB_TEST_PORT: ${{ job.services.mysql.ports['3306'] }}
                  DB_TEST_DB: deployer__migrateupdown
              run: |
                  mysql --host ${DB_TEST_HOST} -u${DB_TEST_USER} -p${DB_TEST_PASS} --port ${DB_TEST_PORT} -e "CREATE DATABASE IF NOT EXISTS ${DB_TEST_DB};"
                  yarn run migrate:test
                  yarn run migrate:rollback:test
